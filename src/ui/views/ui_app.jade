extends ./chrome.jade

block content
  style.
    .loader-container {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-flow: column nowrap;
      position: absolute;
      top: 0px;
      left: 0px;
      right: 0px;
      bottom: 0px;
      background-color: rgba(255, 255, 255, 0.5);
      user-select: none;
      cursor: default;
    }

    .loader-waiting {
      cursor: wait;
    }

    .loader {
      text-align: center;
      color: $b42;
    }

    .loader-loading {
      position: absolute;
      top: calc(50% - 3em);
      left: calc(50% - 3em);

      font-size: 10px;
      text-indent: -9999em;
      border-top: 0.3em solid #ff5000;
      border-right: 0.3em solid transparent;
      border-bottom: 0.3em solid #ff5000;
      border-left: 0.3em solid transparent;
      animation: loadSpinner 1s infinite linear;
      border-radius: 50%;
      width: 6em;
      height: 6em;

      &:after {
        border-radius: 50%;
        width: 6em;
        height: 6em;
      }
    }

    @keyframes loadSpinner {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }

  .kibanaWelcomeView
    .loader-container
      .loader
        .loader-loading

  script.
    function extractHostname(url) {
      let domain;
      //find & remove protocol (http, ftp, etc.) and get domain
      if (url.indexOf("://") > -1) {
        domain = url.split('/')[2];
      }
      else {
        domain = url.split('/')[0];
      }

      //find & remove port number
      domain = domain.split(':')[0];

      return domain;
    }

    function extractRootDomain(url) {
      let domain = extractHostname(url);
      const splitArr = domain.split('.');
      const arrLen = splitArr.length;

      //extracting the root domain here
      if (arrLen > 2) {
        domain = splitArr[arrLen - 2] + '.' + splitArr[arrLen - 1];
      }
      return domain;
    }

    // BRAD'S HACK FOR SAME ORIGIN POLICY WORKAROUND
    // I want to be able to get the current url on kibana when it is iframed in CMS
    window.document.domain = extractRootDomain(window.document.domain);

    window.onload = function () {
      var buildNum = #{kibanaPayload.buildNum};
      var cacheParam = buildNum ? '?v=' + buildNum : '';
      function bundleFile(filename) {
        var anchor = document.createElement('a');
        anchor.setAttribute('href', !{JSON.stringify(bundlePath)} + '/' + filename + cacheParam);
        return anchor.href;
      }
      var files = [
        bundleFile('commons.style.css'),
        bundleFile('#{app.id}.style.css'),
        bundleFile('commons.bundle.js'),
        bundleFile('#{app.id}.bundle.js')
      ];

      (function next() {
        var file = files.shift();
        if (!file) return;

        var failure = function () {
          // make subsequent calls to failure() noop
          failure = function () {};

          var err = document.createElement('h1');
          err.style['color'] = 'white';
          err.style['font-family'] = 'monospace';
          err.style['text-align'] = 'center';
          err.style['background'] = '#F44336';
          err.style['padding'] = '25px';
          err.innerText = 'Kibana did not load properly. Check the server output for more information.';

          document.body.innerHTML = err.outerHTML;
        }

        var type = /\.js(\?.+)?$/.test(file) ? 'script' : 'link';
        var dom = document.createElement(type);
        dom.setAttribute('async', '');
        dom.addEventListener('error', failure);

        if (type === 'script') {
          dom.setAttribute('src', file);
          dom.addEventListener('load', next);
          document.head.appendChild(dom);
        } else {
          dom.setAttribute('rel', 'stylesheet');
          dom.setAttribute('href', file);
          document.head.appendChild(dom);
          next();
        }
      }());
    };
